name: Content Sync and Trigger Vercel Deploy

on:
  repository_dispatch:
    types: [content-update]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout website code
        uses: actions/checkout@v3
      
      - name: Checkout content repository
        uses: actions/checkout@v3
        with:
          repository: fending/bfdc-content
          token: ${{ secrets.CONTENT_REPO_TOKEN }}
          path: bfdc-content
          ref: main
      
      - name: Copy new image assets
        run: |
          # Create target directory if it doesn't exist
          mkdir -p public/images
          
          # Copy images from bfdc-content that don't already exist in public/images
          for image in bfdc-content/content/assets/images/*; do
            if [ -f "$image" ]; then
              filename=$(basename "$image")
              if [ ! -f "public/images/$filename" ]; then
                echo "Copying new image: $filename"
                cp "$image" "public/images/"
              else
                echo "Skipping existing image: $filename"
              fi
            fi
          done
      
      - name: Update articles.json from content
        run: |
          # Create a simple script to process content and update articles.json
          node -e "
          const fs = require('fs');
          const path = require('path');
          
          // Read existing articles
          const articlesPath = 'public/static/articles.json';
          let articles = [];
          if (fs.existsSync(articlesPath)) {
            articles = JSON.parse(fs.readFileSync(articlesPath, 'utf8'));
          }
          
          // Process new articles from bfdc-content
          const contentDir = 'bfdc-content/content/articles/summaries';
          if (fs.existsSync(contentDir)) {
            const files = fs.readdirSync(contentDir);
            files.forEach(file => {
              if (file.endsWith('.md')) {
                const content = fs.readFileSync(path.join(contentDir, file), 'utf8');
                
                // Parse frontmatter
                const frontmatterMatch = content.match(/^---\s*\n([\s\S]*?)\n---/);
                let metadata = {};
                let articleContent = content;
                
                if (frontmatterMatch) {
                  const frontmatter = frontmatterMatch[1];
                  articleContent = content.slice(frontmatterMatch[0].length).trim();
                  
                  // Parse YAML-like frontmatter
                  frontmatter.split('\n').forEach(line => {
                    const match = line.match(/^(\w+):\s*(.+)$/);
                    if (match) {
                      let value = match[2].trim();
                      // Remove quotes if present
                      if (value.startsWith('\"') && value.endsWith('\"')) {
                        value = value.slice(1, -1);
                      }
                      // Parse arrays
                      if (value.startsWith('[') && value.endsWith(']')) {
                        value = value.slice(1, -1).split(',').map(s => s.trim().replace(/\"/g, ''));
                      }
                      metadata[match[1]] = value;
                    }
                  });
                }
                
                const slug = metadata.slug || file.replace('.md', '');
                
                // Check if article already exists
                if (!articles.find(a => a.slug === slug)) {
                  console.log('Adding new article:', slug);
                  articles.push({
                    slug: slug,
                    title: metadata.title || slug.replace(/-/g, ' '),
                    date: metadata.date || new Date().toISOString().split('T')[0],
                    author: metadata.author || 'Brian Fending',
                    excerpt: metadata.excerpt || 'New article content',
                    content: articleContent,
                    tags: metadata.tags || ['New'],
                    featuredImage: metadata.featuredImage,
                    metaDescription: metadata.metaDescription || metadata.excerpt,
                    linkedinUrl: metadata.linkedinUrl,
                    substackUrl: metadata.substackUrl
                  });
                }
              }
            });
          }
          
          // Write updated articles
          fs.writeFileSync(articlesPath, JSON.stringify(articles, null, 2));
          "
      
      - name: Commit and push new images
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add public/images/ public/static/articles.json
          if git diff --staged --quiet; then
            echo "No new content to commit"
          else
            git commit -m "Add new content and image assets from content repository"
            git push
          fi
      
      - name: Trigger Vercel Deploy Hook
        run: curl -X POST ${{ secrets.VERCEL_DEPLOY_HOOK_URL }}