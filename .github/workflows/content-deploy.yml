name: Content Sync and Trigger Vercel Deploy

on:
  repository_dispatch:
    types: [content-update]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout website code
        uses: actions/checkout@v3
      
      - name: Checkout content repository
        uses: actions/checkout@v3
        with:
          repository: fending/bfdc-content
          token: ${{ secrets.CONTENT_REPO_TOKEN }}
          path: bfdc-content
          ref: main
      
      - name: Copy new image assets
        run: |
          # Create target directory if it doesn't exist
          mkdir -p public/images
          
          # Copy images from bfdc-content that don't already exist in public/images
          for image in bfdc-content/content/assets/images/*; do
            if [ -f "$image" ]; then
              filename=$(basename "$image")
              if [ ! -f "public/images/$filename" ]; then
                echo "Copying new image: $filename"
                cp "$image" "public/images/"
              else
                echo "Skipping existing image: $filename"
              fi
            fi
          done
      
      - name: Update articles.json from content
        run: |
          # Create a simple script to process content and update articles.json
          node -e "
          const fs = require('fs');
          const path = require('path');
          
          // Read existing articles
          const articlesPath = 'public/static/articles.json';
          let articles = [];
          if (fs.existsSync(articlesPath)) {
            articles = JSON.parse(fs.readFileSync(articlesPath, 'utf8'));
          }
          
          // Rebuild articles array from bfdc-content metadata and summaries
          const metadataDir = 'bfdc-content/content/articles/metadata';
          const summariesDir = 'bfdc-content/content/articles/summaries';
          const newArticles = [];
          
          if (fs.existsSync(metadataDir)) {
            const files = fs.readdirSync(metadataDir);
            files.forEach(file => {
              if (file.endsWith('.json')) {
                try {
                  // Read metadata from JSON file
                  const metadataPath = path.join(metadataDir, file);
                  const metadata = JSON.parse(fs.readFileSync(metadataPath, 'utf8'));
                  
                  // Validate required fields
                  const requiredFields = ['title', 'slug', 'date', 'author'];
                  for (const field of requiredFields) {
                    if (!metadata[field]) {
                      console.error('Error: Missing required field \'' + field + '\' in ' + file);
                      process.exit(1);
                    }
                  }
                  
                  // Read corresponding content file
                  const slug = file.replace('.json', '');
                  const contentPath = path.join(summariesDir, slug + '.md');
                  
                  if (!fs.existsSync(contentPath)) {
                    console.error('Error: Content file not found for ' + slug + ': ' + contentPath);
                    process.exit(1);
                  }
                  
                  const content = fs.readFileSync(contentPath, 'utf8').trim();
                  
                  console.log('Processing article:', slug);
                  newArticles.push({
                    slug: metadata.slug,
                    title: metadata.title,
                    date: metadata.date,
                    author: metadata.author,
                    excerpt: metadata.excerpt || 'Article summary',
                    content: content,
                    tags: metadata.tags || [],
                    featuredImage: metadata.featuredImage,
                    metaDescription: metadata.metaDescription || metadata.excerpt,
                    linkedinUrl: metadata.linkedinUrl,
                    substackUrl: metadata.substackUrl
                  });
                  
                } catch (error) {
                  console.error('Error processing ' + file + ': ' + error.message);
                  process.exit(1);
                }
              }
            });
            
            // Sort articles by date (newest first)
            newArticles.sort((a, b) => new Date(b.date) - new Date(a.date));
            articles = newArticles;
          }
          
          // Write updated articles
          fs.writeFileSync(articlesPath, JSON.stringify(articles, null, 2));
          "
      
      - name: Commit and push new images
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add public/images/ public/static/articles.json
          if git diff --staged --quiet; then
            echo "No new content to commit"
          else
            git commit -m "Add new content and image assets from content repository"
            git pull --rebase origin main
            git push
          fi
      
      - name: Trigger Vercel Deploy Hook
        run: curl -X POST ${{ secrets.VERCEL_DEPLOY_HOOK_URL }}